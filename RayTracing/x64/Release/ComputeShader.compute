cbuffer c : register(b0)
{
	float3 near_plane_up;
	float width;

	float3 near_plane_side;
	float height;

	float3 near_plane_center;
	int sphereCount;

	float3 camera_position;
	int lightCount;
};

struct Sphere
{
	float3 center;
	float radius;

	float4 color;

	float3 boundingBoxMin;
	float padding0;

	float3 boundingBoxMax;
	float padding1;
};

struct Child_score
{
	float minT;
	int child_index;
};

struct Octree_node
{
	float3 boxMin;
	int isLeaf;

	float3 boxMax;
	int sphereStartIndex;

	int4 childIndices[2];
};

struct Light
{
	float3 position;
	float padding;

	float4 color;
};

struct Ray
{
	float3 origin;
	float3 direction;
};

struct IntersectionPoint
{
	float3 position;
	float3 normal;
	float4 color;
};



//Read-write
RWTexture2D<float4> screen_texture : register(u0);
//Read onlys
StructuredBuffer<Sphere> spheres : register(t0);
StructuredBuffer<Light> lights : register(t1);
StructuredBuffer<Octree_node> octree : register(t2);
Buffer<int> sphere_indirection : register(t3);


float4 blinn_phong_shading(const IntersectionPoint intersectionPoint, const Ray ray, const Light light)
{
	float specularPower = 40.0f;
	float4 totalColor;
	const float3 surfaceNormal = intersectionPoint.normal;
	float3 surfaceToLight = light.position - intersectionPoint.position;
	float3 viewDir = normalize(intersectionPoint.position - camera_position);
	float surfaceToLightLen = length(surfaceToLight);
	surfaceToLight /= surfaceToLightLen;
	float NoL = saturate(dot(surfaceNormal, surfaceToLight));

	totalColor = intersectionPoint.color * light.color * NoL / (surfaceToLightLen * surfaceToLightLen);
	float3 h = normalize(surfaceToLight + viewDir);
	float NoH = saturate(dot(surfaceNormal, h));
	totalColor += pow(NoH, specularPower) * intersectionPoint.color * light.color / (surfaceToLightLen * surfaceToLightLen);
	return totalColor;
}

void get_shadow_ray(const IntersectionPoint intersectionPoint, const Ray ray, const Light light, out Ray shadowRay)
{
	shadowRay.direction = normalize(light.position - intersectionPoint.position);
	shadowRay.origin = intersectionPoint.position + float3(0.005, 0.005, 0.005) * intersectionPoint.normal;
}

bool check_ray_sphere_intersection(Sphere sphere, const Ray ray, out float t)
{
	float3 o_c = ray.origin - sphere.center;
	float dDotD = dot(ray.direction, ray.direction);

	float delta = pow(dot(ray.direction, (o_c)), 2)
		- dDotD *(dot(o_c, o_c) - pow(sphere.radius, 2));

	if (delta < 0)
	{
		return false;
	}
	else
	{
		float t1 = (-dot(ray.direction, o_c) + sqrt(delta)) / dDotD;
		float t2 = (-dot(ray.direction, o_c) - sqrt(delta)) / dDotD;

		float minRoot;
		float maxRoot;
		if (t1 > t2)
		{
			minRoot = t2;
			maxRoot = t1;
		}
		else
		{
			minRoot = t2;
			maxRoot = t1;
		}

		if (minRoot < 0)
		{
			if (maxRoot < 0)
			{
				return false;
			}
			else
			{
				t = maxRoot;
				return true;
			}
		}
		else
		{
			t = minRoot;
			return true;
		}
	}
}

bool check_ray_plane_intersection(const float3 n, const float3 p0, const Ray ray, out float t)
{
	float denom = dot(n, ray.direction);
	if (denom > 1e-6) {
		float3 p0l0 = p0 - ray.origin;
		t = dot(p0l0, n) / denom;
		return (t >= 0);
	}

	return false;
}

bool check_ray_box_intersection(const Ray ray, const float3 boxMin, const float3 boxMax, out float outTMin)
{
	float tmin = -5873200, tmax = 5873200;

	if (ray.direction.x != 0.0)
	{
		float tx1 = (boxMin.x - ray.origin.x) / ray.direction.x;
		float tx2 = (boxMax.x - ray.origin.x) / ray.direction.x;

		tmin = max(tmin, min(tx1, tx2));
		tmax = min(tmax, max(tx1, tx2));
	}

	if (ray.direction.y != 0.0) {
		float ty1 = (boxMin.y - ray.origin.y) / ray.direction.y;
		float ty2 = (boxMax.y - ray.origin.y) / ray.direction.y;

		tmin = max(tmin, min(ty1, ty2));
		tmax = min(tmax, max(ty1, ty2));
	}

	if (ray.direction.z != 0.0) {
		float tz1 = (boxMin.z - ray.origin.z) / ray.direction.z;
		float tz2 = (boxMax.z - ray.origin.z) / ray.direction.z;

		tmin = max(tmin, min(tz1, tz2));
		tmax = min(tmax, max(tz1, tz2));
	}
	outTMin = tmin;
	return tmax >= tmin;
}


bool scene_find_closest_intersection(const Ray ray, out IntersectionPoint intersectionPoint, out float t, out float test)
{
	test = 0;
	Octree_node treeStack[40];
	int stackCount = 0;
	treeStack[stackCount] = octree[0];
	stackCount++;
	while (stackCount != 0)
	{
		Octree_node currentNode = treeStack[stackCount - 1];
		stackCount--;

		if (currentNode.isLeaf)
		{
			float minT = 100000000.0f;
			int minIndex = -1;
			int sphereIndirectionBufferIndex = currentNode.sphereStartIndex;
			int sphereIndex = sphere_indirection[sphereIndirectionBufferIndex];
			while (sphereIndex != -1)
			{
				if (check_ray_sphere_intersection(spheres[sphereIndex], ray, t))
				{
					if (t < minT)
					{
						minIndex = sphereIndex;
						minT = t;
					}
				}
				sphereIndirectionBufferIndex++;
				sphereIndex = sphere_indirection[sphereIndirectionBufferIndex];
			}

			if (minIndex != -1)
			{
				t = minT;
				intersectionPoint.position = ray.origin + ray.direction * t;
				intersectionPoint.color = spheres[minIndex].color;
				intersectionPoint.normal = normalize(intersectionPoint.position - spheres[minIndex].center);
				return true;
			}
			else
			{
				continue;
			}
		}
		else
		{
			int tempchildIndices[8] = (int[8])currentNode.childIndices;

			int foundIntersection = 0;
			Child_score indexDistancePairs[8];
			for (int i = 0; i < 8; i++)
			{
				float intT;
				if (check_ray_box_intersection(ray, octree[tempchildIndices[i]].boxMin, octree[tempchildIndices[i]].boxMax, intT))
				{
					indexDistancePairs[foundIntersection].minT = intT;
					indexDistancePairs[foundIntersection].child_index = tempchildIndices[i];
					foundIntersection++;
					test += 0.1;
				}
			}

			int n = foundIntersection;
			while (1)
			{
				bool swapped = false;
				for (int j = 1; j < foundIntersection; j++)
				{
					if (indexDistancePairs[j - 1].minT > indexDistancePairs[j].minT)
					{
						Child_score tempCP = indexDistancePairs[j - 1];
						indexDistancePairs[j - 1] = indexDistancePairs[j];
						indexDistancePairs[j] = tempCP;
						swapped = true;
					}
				}
				n--;
				if (!swapped)
					break;
			}

			for (int k = 0; k < foundIntersection; k++)
			{
				treeStack[stackCount] = octree[indexDistancePairs[k].child_index];
				stackCount++;
			}
		}
	}

	return false;
}


bool find_closest_intersection(Ray ray, out IntersectionPoint intersectionPoint, out float t)
{
	float sceneT;
	float groundT;
	float test;
	bool intersectionWithScene = scene_find_closest_intersection(ray, intersectionPoint, sceneT, test);
	bool intersectionWithGround = check_ray_plane_intersection(float3(0, 0, -1), float3(0, 0, -10), ray, groundT);
	if (intersectionWithScene || intersectionWithGround)
	{
		if (intersectionWithScene && intersectionWithGround)
		{
			if (groundT < sceneT)
			{
				intersectionPoint.normal = float3(0, 0, 1);
				intersectionPoint.position = ray.origin + ray.direction * groundT;
				intersectionPoint.color = float4(0.3, 0.4, 0.85, 1);
				t = groundT;
			}
			else
			{
				t = sceneT;
			}
		}
		else
		{
			if (intersectionWithScene)
			{
				t = sceneT;
			}
			else
			{
				intersectionPoint.normal = float3(0, 0, 1);
				intersectionPoint.position = ray.origin + ray.direction * groundT;
				intersectionPoint.color = float4(0.3, 0.4, 0.85, 1);
				t = groundT;
			}
		}
		return true;
	}
	return false;
}

bool in_shadow(const Ray shadowRay, const Light light)
{
	IntersectionPoint intersectionPoint;
	float maxT = length(light.position - shadowRay.origin);
	float intersectionT;
	if (find_closest_intersection(shadowRay, intersectionPoint, intersectionT) && intersectionT < maxT)
	{
		return true;
	}

	return false;
}

float4 shade(const IntersectionPoint intersectionPoint, const Ray ray)
{
	float4 output = 0;
	Ray shadowRay;

	for (int i = 0; i < lightCount; i++)
	{
		get_shadow_ray(intersectionPoint, ray, lights[i], shadowRay);

		if (!in_shadow(shadowRay, lights[i]))
		{
			output += blinn_phong_shading(intersectionPoint, ray, lights[i]);
		}
	}

	return output;
}

float4 trace(Ray ray)
{
	IntersectionPoint intersectionPoint;
	float t;
	if (find_closest_intersection(ray, intersectionPoint, t))
	{
		return shade(intersectionPoint, ray);
	}
	else
	{
		return float4(129, 191, 212, 1) / 255;
	}
}

[numthreads(8, 8, 1)]
void main(uint3 threadId : SV_DispatchThreadID, uint3 localId : SV_GroupThreadID)
{
	float2 ssPos = float2(threadId.xy);
	float2 dimension = float2(width, height);
	ssPos = ssPos / dimension;
	ssPos = ssPos * 2 - 1;

	float3 pixelWorldPos = near_plane_center + near_plane_up * -ssPos.y + near_plane_side * ssPos.x;
	float3 rayDir = normalize(pixelWorldPos - camera_position);
	Ray ray;
	ray.direction = rayDir;
	ray.origin = camera_position;

	screen_texture[uint2(threadId.x, threadId.y)] = trace(ray);
}

